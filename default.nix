# This file was generated by the {rix} R package v0.17.0 on 2025-06-08
# with following call:
# >rix(date = "2025-05-26",
#  > r_pkgs = c("nhanesA",
#  > "golem",
#  > "shiny",
#  > "cards",
#  > "dbplyr",
#  > "RPostgres",
#  > "gt",
#  > "gtsummary",
#  > "echarts4r",
#  > "reactable",
#  > "dplyr",
#  > "tidyr",
#  > "purrr",
#  > "renv",
#  > "attachment",
#  > "openxlsx2",
#  > "devtools",
#  > "testthat",
#  > "dotenv",
#  > "markdown",
#  > "pool",
#  > "DBI",
#  > "lubridate",
#  > "stringr",
#  > "survey",
#  > "srvyr"),
#  > system_pkgs = "postgresql",
#  > ide = "none",
#  > project_path = path_default_nix,
#  > overwrite = TRUE,
#  > print = FALSE,
#  > shell_hook = shell_hook,
#  > r_ver = "4.5.0")
# It uses the `rstats-on-nix` fork of `nixpkgs` which provides improved
# compatibility with older R versions and R packages for Linux/WSL and
# Apple Silicon computers.
# Report any issues to https://github.com/ropensci/rix
let
 pkgs = import (fetchTarball "https://github.com/rstats-on-nix/nixpkgs/archive/2025-05-26.tar.gz") {};
 
  rpkgs = builtins.attrValues {
    inherit (pkgs.rPackages) 
      attachment
      cards
      DBI
      dbplyr
      devtools
      dotenv
      dplyr
      echarts4r
      golem
      gt
      gtsummary
      lubridate
      markdown
      nhanesA
      openxlsx2
      pool
      purrr
      reactable
      renv
      RPostgres
      shiny
      srvyr
      stringr
      survey
      testthat
      tidyr;
  };
      
  system_packages = builtins.attrValues {
    inherit (pkgs) 
      glibcLocales
      nix
      postgresql
      R;
  };
  
  shell = pkgs.mkShell {
    LOCALE_ARCHIVE = if pkgs.system == "x86_64-linux" then "${pkgs.glibcLocales}/lib/locale/locale-archive" else "";
    LANG = "en_US.UTF-8";
    LC_ALL = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    
    buildInputs = [ rpkgs system_packages ];
    shellHook = "
export PGHOST=localhost
export PGPORT=5555
export PGUSER=dev
export PGPASSWORD=example
export PGDATABASE=postgres
export TARGET=./.dev_postgres
export PGDATA=./.dev_postgres/.pg

mkdir -p $TARGET
cat >$TARGET/postgresql_add.conf <<'EOF'
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 100 # ms
log_connections = on
log_disconnections = on
log_duration = on
log_timezone = 'UTC'
log_statement = 'all'
log_directory = 'logs'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
logging_collector = on
log_min_error_statement = error
EOF

CURRENT_DIR=$(pwd)
PGDATA=$CURRENT_DIR/$TARGET/.pg

[ ! -d $PGDATA ] && PGHOST=$PGDATA pg_ctl initdb -o \"-U $PGUSER\" && cat $TARGET/postgresql_add.conf >> $PGDATA/postgresql.conf

pg_ctl -o \"-p $PGPORT -k $PGDATA\" start && {
  trap 'pg_ctl stop' EXIT
}
";
  }; 
in
  {
    inherit pkgs shell;
  }
